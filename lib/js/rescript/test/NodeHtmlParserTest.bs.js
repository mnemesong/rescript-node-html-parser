// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var NodeHtmlParser = require("../src/NodeHtmlParser.bs.js");
var Mocha$RescriptMocha = require("rescript-mocha/lib/js/src/Mocha.bs.js");
var Assert$RescriptMocha = require("rescript-mocha/lib/js/src/Assert.bs.js");

Mocha$RescriptMocha.describe("test HtmlElement")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test removeWhitespace")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div>   ");
                        var result = NodeHtmlParser.HtmlElement.toString(NodeHtmlParser.HtmlElement.removeWhitespace(given));
                        Assert$RescriptMocha.equal(undefined, "<div> dsak0d</div>", result);
                      }));
              }));
        Mocha$RescriptMocha.describe("test quarySelectorAll")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div> <div>d09asm0mds0</div>  ");
                        var result = Belt_Result.getExn(Belt_Result.map(NodeHtmlParser.HtmlElement.querySelectorAll(given, "div"), (function (r) {
                                    return Belt_Array.map(r, (function (r) {
                                                  return NodeHtmlParser.HtmlElement.toString(r);
                                                }));
                                  })));
                        var nominal = [
                          "<div> dsak0d</div>",
                          "<div>d09asm0mds0</div>"
                        ];
                        Assert$RescriptMocha.deep_equal(undefined, nominal, result);
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div> <div>d09asm0mds0</div>  ");
                        var result = NodeHtmlParser.HtmlElement.querySelectorAll(given, "!das?");
                        Assert$RescriptMocha.deep_equal(undefined, {
                              TAG: /* Error */1,
                              _0: "Unmatched selector: ?"
                            }, result);
                      }));
              }));
        Mocha$RescriptMocha.describe("test quarySelector")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div> <div>d09asm0mds0</div>  ");
                        var result = Belt_Result.getExn(Belt_Result.map(NodeHtmlParser.HtmlElement.querySelector(given, "div"), (function (r) {
                                    return NodeHtmlParser.HtmlElement.toString(Belt_Option.getExn(r));
                                  })));
                        Assert$RescriptMocha.equal(undefined, "<div> dsak0d</div>", result);
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div> <div>d09asm0mds0</div>  ");
                        var result = Belt_Result.getExn(NodeHtmlParser.HtmlElement.querySelector(given, "a"));
                        Assert$RescriptMocha.equal(undefined, undefined, result);
                      }));
                Mocha$RescriptMocha.it("test 3")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div> <div>d09asm0mds0</div>  ");
                        var result = NodeHtmlParser.HtmlElement.querySelector(given, "!das?");
                        Assert$RescriptMocha.deep_equal(undefined, {
                              TAG: /* Error */1,
                              _0: "Unmatched selector: ?"
                            }, result);
                      }));
              }));
        Mocha$RescriptMocha.describe("test getElementsByTagName")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div> <div>d09asm0mds0</div>  ");
                        var result = Belt_Result.getExn(Belt_Result.map(NodeHtmlParser.HtmlElement.querySelectorAll(given, "div"), (function (r) {
                                    return Belt_Array.map(r, (function (r) {
                                                  return NodeHtmlParser.HtmlElement.toString(r);
                                                }));
                                  })));
                        var nominal = [
                          "<div> dsak0d</div>",
                          "<div>d09asm0mds0</div>"
                        ];
                        Assert$RescriptMocha.deep_equal(undefined, nominal, result);
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div> <div>d09asm0mds0</div>  ");
                        var result = NodeHtmlParser.HtmlElement.getElementsByTagName(given, "");
                        var nominal = [];
                        Assert$RescriptMocha.deep_equal(undefined, nominal, result);
                      }));
              }));
        Mocha$RescriptMocha.describe("test closest")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var root = NodeHtmlParser.parse("<body>   <div> dsak0d</div> <div>d09asm0mds0<a>Hello</a></div>  </body>");
                        var given = Belt_Option.getExn(Belt_Result.getExn(NodeHtmlParser.HtmlElement.querySelector(root, "a")));
                        var result = NodeHtmlParser.HtmlElement.toString(Belt_Option.getExn(Belt_Result.getExn(NodeHtmlParser.HtmlElement.closest(given, "body"))));
                        Assert$RescriptMocha.equal(undefined, "<body>   <div> dsak0d</div> <div>d09asm0mds0<a>Hello</a></div>  </body>", result);
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div> <div>d09asm0mds0</div>  ");
                        var result = Belt_Result.getExn(NodeHtmlParser.HtmlElement.querySelector(given, "a"));
                        Assert$RescriptMocha.equal(undefined, undefined, result);
                      }));
                Mocha$RescriptMocha.it("test 3")(undefined, undefined, undefined, (function (param) {
                        var given = NodeHtmlParser.parse("   <div> dsak0d</div> <div>d09asm0mds0</div>  ");
                        var result = NodeHtmlParser.HtmlElement.querySelector(given, "!das?");
                        Assert$RescriptMocha.deep_equal(undefined, {
                              TAG: /* Error */1,
                              _0: "Unmatched selector: ?"
                            }, result);
                      }));
              }));
      }));

/*  Not a pure module */
