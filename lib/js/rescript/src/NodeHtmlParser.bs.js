// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

const parser = require('node-html-parser');
;

var parse = (function (str) {
  return parser.parse(str);
});

var trimRightMut = (function (htmlEl) {
  return htmlEl.trimRight();
});

var removeWhitespaceMut = (function (htmlEl) {
  return htmlEl.removeWhitespace();
});

function querySelectorAll(htmlElement, selector) {
  try {
    var qsa = (function (htmlEl, selector) {
      const res = htmlEl.querySelectorAll(selector);
      if(!Array.isArray(res)) {
        return [res];
      }
      return res;
    });
    return {
            TAG: /* Ok */0,
            _0: qsa(htmlElement, selector)
          };
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID !== Js_exn.$$Error) {
      return {
              TAG: /* Error */1,
              _0: "Unknown error"
            };
    }
    var s = e._1.message;
    if (s !== undefined) {
      return {
              TAG: /* Error */1,
              _0: s
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: ""
            };
    }
  }
}

function getElementsByTagName(htmlElement, selector) {
  var qsa = (function (htmlEl, selector) {
      const res = htmlEl.getElementsByTagName(selector);
      if(!Array.isArray(res)) {
        return [res];
      }
      return res;
    });
  return qsa(htmlElement, selector);
}

function querySelector(htmlElement, selector) {
  try {
    var qsa = (function (htmlEl, selector) {
      const res = htmlEl.querySelector(selector);
      return res;
    });
    return {
            TAG: /* Ok */0,
            _0: qsa(htmlElement, selector)
          };
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID !== Js_exn.$$Error) {
      return {
              TAG: /* Error */1,
              _0: "Unknown error"
            };
    }
    var s = e._1.message;
    if (s !== undefined) {
      return {
              TAG: /* Error */1,
              _0: s
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: ""
            };
    }
  }
}

function closest(htmlElement, selector) {
  try {
    var qsa = (function (htmlEl, selector) {
      const res = htmlEl.closest(selector);
      return res;
    });
    return {
            TAG: /* Ok */0,
            _0: qsa(htmlElement, selector)
          };
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID !== Js_exn.$$Error) {
      return {
              TAG: /* Error */1,
              _0: "Unknown error"
            };
    }
    var s = e._1.message;
    if (s !== undefined) {
      return {
              TAG: /* Error */1,
              _0: s
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: ""
            };
    }
  }
}

var toString = (function(htmlEl) {
  return htmlEl.toString();
});

function insertAdjacentHtmlMut(htmlElement, where, html) {
  try {
    var res = (function (htmlEl, where, html) {
      return htmlEl.insertAdjacentHTML(where, html);
    });
    return {
            TAG: /* Ok */0,
            _0: res(htmlElement, where, html)
          };
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID !== Js_exn.$$Error) {
      return {
              TAG: /* Error */1,
              _0: "Unknown error"
            };
    }
    var s = e._1.message;
    if (s !== undefined) {
      return {
              TAG: /* Error */1,
              _0: s
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: ""
            };
    }
  }
}

function setAttributesMut(htmlElement, attrs) {
  var buildAttrObj = (function (attrs) {
    let res = {};
    attrs.forEach( a => {
      res[a[0]] = a[1];
    } );
    return res;
  });
  var setAttr = (function (htmlEl, attrs) {
    return htmlEl.setAttributes(attrs);
  });
  return setAttr(htmlElement, buildAttrObj(attrs));
}

var replaceWithMut = (function (htmlEl, strs) {
  return htmlEl.replaceWith(strs);
});

var removeMut = (function (htmlEl) {
  return htmlEl.remove();
});

var outerHtml = (function (htmlEl) {
  return htmlEl.outerHTML;
});

var innerHtml = (function (htmlEl) {
  return htmlEl.innerHTML;
});

var tagName = (function (htmlEl) {
  return htmlEl.tagName;
});

var attributes = (function (htmlEl) {
  return {...htmlEl.attributes};
});

exports.parse = parse;
exports.trimRightMut = trimRightMut;
exports.removeWhitespaceMut = removeWhitespaceMut;
exports.querySelectorAll = querySelectorAll;
exports.getElementsByTagName = getElementsByTagName;
exports.querySelector = querySelector;
exports.closest = closest;
exports.toString = toString;
exports.insertAdjacentHtmlMut = insertAdjacentHtmlMut;
exports.setAttributesMut = setAttributesMut;
exports.replaceWithMut = replaceWithMut;
exports.removeMut = removeMut;
exports.outerHtml = outerHtml;
exports.innerHtml = innerHtml;
exports.tagName = tagName;
exports.attributes = attributes;
/*  Not a pure module */
